{
  "source_base_path": "C:/Users/Nathanne Isip/Documents/Projects/Glasgow",
  "xrefmap": "xrefmap.yml",
  "files": [
    {
      "type": "Resource",
      "output": {
        "resource": {
          "relative_path": "index.json"
        }
      }
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.CryptographyUtil.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.CryptographyUtil.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.CryptographyUtil",
      "Summary": "<p sourcefile=\"api/Glasgow.CryptographyUtil.yml\" sourcestartlinenumber=\"1\">Provides utility methods for cryptographic operations used throughout GlasgowDB,\nincluding secure key derivation from passwords or passphrases.</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.DataTypes.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.DataTypes.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.DataTypes",
      "Summary": "<p sourcefile=\"api/Glasgow.DataTypes.yml\" sourcestartlinenumber=\"1\">Enumerates all supported data types used by the <xref href=\"Glasgow.GlasgowDB\" data-throw-if-not-resolved=\"false\"></xref> system for\nserializing and storing values in its internal tabular structure.</p>\n<p sourcefile=\"api/Glasgow.DataTypes.yml\" sourcestartlinenumber=\"4\">Each enumeration value corresponds to a specific .NET type and dictates how the value is\nserialized, deserialized, stored, and interpreted within the database engine.\nThese types ensure compatibility with common .NET primitives and are essential for\nconsistent binary serialization handled by <xref href=\"Glasgow.SerializerUtil\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p sourcefile=\"api/Glasgow.DataTypes.yml\" sourcestartlinenumber=\"9\">The <xref href=\"Glasgow.SerializerUtil\" data-throw-if-not-resolved=\"false\"></xref> uses this enum as metadata to identify the type of\nvalue being serialized or deserialized, enabling type-safe reconstruction of data across\nsessions, storage layers, or transport boundaries.</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.DatabaseIO.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.DatabaseIO.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.DatabaseIO",
      "Summary": "<p sourcefile=\"api/Glasgow.DatabaseIO.yml\" sourcestartlinenumber=\"1\">Handles secure serialization and deserialization of a <xref href=\"Glasgow.GlasgowDB\" data-throw-if-not-resolved=\"false\"></xref> instance to and from disk.</p>\n<p sourcefile=\"api/Glasgow.DatabaseIO.yml\" sourcestartlinenumber=\"3\">This class provides AES-256-CBC encryption for secure database persistence, using a passphrase-derived key\nvia PBKDF2 and a randomly generated Initialization Vector (IV) embedded at the start of the file.</p>\n<p sourcefile=\"api/Glasgow.DatabaseIO.yml\" sourcestartlinenumber=\"6\">All data (including table structure and row content) is stored in a binary format after encryption.</p>\n<p>\n<b>Security Considerations:</b>\n<ul><li>Encryption uses AES-256-CBC for strong symmetric encryption.</li><li>Keys are derived from passphrases using PBKDF2 to resist brute force attacks.</li><li>The IV is stored unencrypted at the beginning of the file and is used for key derivation and decryption.</li></ul>\n\n<p>\n<b>Typical Usage:</b><br>\n- Use <xref href=\"Glasgow.DatabaseIO.SaveToFile(Glasgow.GlasgowDB%2cSystem.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> to persist a <xref href=\"Glasgow.GlasgowDB\" data-throw-if-not-resolved=\"false\"></xref> securely.<br>\n- Use <xref href=\"Glasgow.DatabaseIO.LoadFromFile(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> to recover it using the same passphrase.\n</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.DeleteCommand.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.DeleteCommand.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.DeleteCommand",
      "Summary": "<p sourcefile=\"api/Glasgow.DeleteCommand.yml\" sourcestartlinenumber=\"1\">Constructs and runs a DELETE operation against a specified table in a <xref href=\"Glasgow.GlasgowDB\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>\nThis class leverages the filtering functionality inherited from <xref href=\"Glasgow.QueryBase\" data-throw-if-not-resolved=\"false\"></xref> to enable\n<code>WHERE</code> clauses that refine which rows to remove. Each <xref href=\"Glasgow.DeleteCommand.Where(Glasgow.Operator%2cSystem.String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> call adds an additional\npredicate: all predicates are combined with logical AND semantics.\n</p>\n<p>\nExample usage:\n<pre><code class=\"lang-csharp\">int deletedCount = db.Delete(\"Users\")\n    .Where(Operator.EQUALS, \"IsActive\", false)\n    .Where(Operator.LESS_THAN, \"LastLogin\", someDate)\n    .Execute();</code></pre>\nThis example deletes all rows in the \"Users\" table that are inactive and have a last login earlier than <code>someDate</code>.\n\n<p>\nIf the specified table does not exist in the database, <xref href=\"Glasgow.DeleteCommand.Execute\" data-throw-if-not-resolved=\"false\"></xref> returns zero without throwing.\n</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.GlasgowDB.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.GlasgowDB.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.GlasgowDB",
      "Summary": "<p sourcefile=\"api/Glasgow.GlasgowDB.yml\" sourcestartlinenumber=\"1\">Represents an in-memory database that holds named tables and provides basic\nrelational operations (CREATE, DROP, INSERT, SELECT, DELETE, UPDATE).</p>\n<p>\nAll data is stored in memory as <xref href=\"Glasgow.Table\" data-throw-if-not-resolved=\"false\"></xref> objects, each identified by a unique string name.\nThis class is not thread-safe: concurrent modifications (e.g., two threads inserting into the same table)\ncan lead to inconsistent state. If thread safety is required, external synchronization must be applied.\n</p>\n<p>\nExample usage:\n<pre><code class=\"lang-csharp\">// Create a new database\nvar db = new GlasgowDB();\n// Create a table \"Users\" with columns \"Id\", \"Name\", \"Email\"\ndb.CreateTable(\"Users\", \"Id\", \"Name\", \"Email\");\n// Insert a row into \"Users\"\ndb.InsertInto(\n    \"Users\",\n    new[] { \"Id\", \"Name\", \"Email\" },\n    new object[] { 1, \"Alice\", \"alice@example.com\" }\n);\n// Query the \"Users\" table\nvar results = db.Select(\"Users\", \"Id\", \"Name\")\n    .Where(Operator.EQUALS, \"Name\", \"Alice\")\n    .ToList();\nforeach (var row in results)\n{\n    Console.WriteLine($\"Id: {row[\"Id\"]}, Name: {row[\"Name\"]}\");\n}\n// Delete inactive users\nint deleted = db.Delete(\"Users\")\n    .Where(Operator.EQUALS, \"IsActive\", false)\n    .Execute();\n// Drop the \"Users\" table entirely\nbool dropped = db.DropTable(\"Users\");</code></pre>\n\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.Null.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.Null.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.Null",
      "Summary": "<p sourcefile=\"api/Glasgow.Null.yml\" sourcestartlinenumber=\"1\">Provides a type-safe, singleton-based representation of null or missing values\nwithin the GlasgowDB system, especially in scenarios where <code>null</code> cannot\nbe used directly or unambiguously.</p>\n<p>\nIn many serialization, storage, or transport layers, the native <code>null</code> reference \nin .NET may lose semantic meaning or cause ambiguity, especially when dealing with \nheterogeneous data structures or binary serialization formats that don't inherently \npreserve <code>null</code> as a unique concept.\n</p>\n<p>\nTo solve this, the GlasgowDB system introduces a special singleton object that acts \nas a \"boxed null.\" This object can be safely stored, compared, and transferred in \nany context where a non-null reference is required but the semantic value is intended \nto represent the absence of meaningful data.\n</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.Operator.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.Operator.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.Operator",
      "Summary": "<p sourcefile=\"api/Glasgow.Operator.yml\" sourcestartlinenumber=\"1\">Enumerates the available comparison operators used for filtering, searching, and conditional\nevaluations within GlasgowDB queries.</p>\n<p>\nThese operators define how a particular field or value in a dataset should be evaluated \nagainst a given condition during query execution. They are typically used in where-clause \nexpressions, filter functions, or conditional indexes.\n</p>\n<p>\nThe applicable operators depend on the data type of the field being compared. For example, \nnumeric and temporal fields support range-based comparisons (e.g., <xref href=\"Glasgow.Operator.LESS_THAN\" data-throw-if-not-resolved=\"false\"></xref>), \nwhereas string fields support pattern-based matching (e.g., <xref href=\"Glasgow.Operator.CONTAINS\" data-throw-if-not-resolved=\"false\"></xref>).\n</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.QueryBase.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.QueryBase.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.QueryBase",
      "Summary": "<p sourcefile=\"api/Glasgow.QueryBase.yml\" sourcestartlinenumber=\"1\">Represents an abstract base class designed to facilitate query-building operations over tabular data structures.\nThis class provides core functionality for defining and applying filter conditions to a collection of rows,\nwhere each row is represented as a dictionary of column names and corresponding values.</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.ResultSet.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.ResultSet.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.ResultSet",
      "Summary": "<p sourcefile=\"api/Glasgow.ResultSet.yml\" sourcestartlinenumber=\"1\">Represents the result of a SELECT query operation within GlasgowDB.</p>\n<p sourcefile=\"api/Glasgow.ResultSet.yml\" sourcestartlinenumber=\"3\">The <xref href=\"Glasgow.ResultSet\" data-throw-if-not-resolved=\"false\"></xref> class encapsulates a filtered, ordered subset of data rows retrieved\nfrom the underlying GlasgowDB in-memory database. Each row is represented as a dictionary\nmapping column names to their corresponding values. This class supports fluent method chaining\nfor applying WHERE clauses, ordering, and union operations to shape and refine query results.</p>\n<p sourcefile=\"api/Glasgow.ResultSet.yml\" sourcestartlinenumber=\"8\">This class inherits from <xref href=\"Glasgow.QueryBase\" data-throw-if-not-resolved=\"false\"></xref> and utilizes internal logic for comparing, filtering,\nand manipulating rows based on column values, enabling dynamic, composable queries.</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.SortComparer.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.SortComparer.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.SortComparer",
      "Summary": "<p sourcefile=\"api/Glasgow.SortComparer.yml\" sourcestartlinenumber=\"1\">Provides a flexible comparison mechanism for sorting heterogeneous objects in either ascending or descending order.\nThis comparer is primarily used in data structures or algorithms that require ordering—such as sorting collections—\nand handles <code>null</code> values gracefully, ensuring deterministic and consistent comparisons.</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.SortDirection.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.SortDirection.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.SortDirection",
      "Summary": "<p sourcefile=\"api/Glasgow.SortDirection.yml\" sourcestartlinenumber=\"1\">Defines the direction in which a collection should be sorted.</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.Table.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.Table.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.Table",
      "Summary": "<p sourcefile=\"api/Glasgow.Table.yml\" sourcestartlinenumber=\"1\">Represents a database table, containing a name, a collection of column names, and a collection of rows.\nEach row is stored as a dictionary mapping column names to their corresponding values.</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.UpdateCommand.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.UpdateCommand.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow.UpdateCommand",
      "Summary": "<p sourcefile=\"api/Glasgow.UpdateCommand.yml\" sourcestartlinenumber=\"1\">Constructs and runs an UPDATE operation against a specified table in a <xref href=\"Glasgow.GlasgowDB\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>\nThis class leverages the filtering functionality inherited from <xref href=\"Glasgow.QueryBase\" data-throw-if-not-resolved=\"false\"></xref> to enable\n<code>WHERE</code> clauses that refine which rows to update. Each <xref href=\"Glasgow.UpdateCommand.Where(Glasgow.Operator%2cSystem.String%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref> call adds an additional\npredicate: all predicates are combined with logical AND semantics.\n</p>\n<p>\nExample usage:\n<pre><code class=\"lang-csharp\">int rowsAffected = db.Update(\"Users\")\n                      .Set(\"IsActive\", false)\n                      .Where(Operator.LESS_THAN, \"LastLogin\", someDate)\n                      .Execute();</code></pre>\nThis example sets the <code>IsActive</code> column to <code>false</code> for all rows in the \"Users\" table\nwhose <code>LastLogin</code> is earlier than <code>someDate</code>.\n\n<p>\nIf the specified table does not exist in the database, <xref href=\"Glasgow.UpdateCommand.Execute\" data-throw-if-not-resolved=\"false\"></xref> returns zero without throwing.\n</p>\n"
    },
    {
      "type": "ManagedReference",
      "source_relative_path": "api/Glasgow.yml",
      "output": {
        ".html": {
          "relative_path": "api/Glasgow.html"
        }
      },
      "version": "",
      "Uid": null,
      "IsMRef": true,
      "Title": "Glasgow",
      "Summary": null
    },
    {
      "type": "Toc",
      "source_relative_path": "api/toc.yml",
      "output": {
        ".html": {
          "relative_path": "api/toc.html"
        },
        ".json": {
          "relative_path": "api/toc.json"
        }
      },
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "docs/examples.md",
      "output": {
        ".html": {
          "relative_path": "docs/examples.html"
        }
      },
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "docs/installation.md",
      "output": {
        ".html": {
          "relative_path": "docs/installation.html"
        }
      },
      "version": ""
    },
    {
      "type": "Toc",
      "source_relative_path": "docs/toc.yml",
      "output": {
        ".html": {
          "relative_path": "docs/toc.html"
        },
        ".json": {
          "relative_path": "docs/toc.json"
        }
      },
      "version": ""
    },
    {
      "type": "Conceptual",
      "source_relative_path": "index.md",
      "output": {
        ".html": {
          "relative_path": "index.html"
        }
      },
      "version": ""
    },
    {
      "type": "Toc",
      "source_relative_path": "toc.yml",
      "output": {
        ".html": {
          "relative_path": "toc.html"
        },
        ".json": {
          "relative_path": "toc.json"
        }
      },
      "version": ""
    }
  ],
  "groups": [
    {
      "xrefmap": "xrefmap.yml"
    }
  ]
}